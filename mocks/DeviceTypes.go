// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "smart_house_backend/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// DeviceTypes is an autogenerated mock type for the DeviceTypes type
type DeviceTypes struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, deviceType
func (_m *DeviceTypes) Create(ctx context.Context, deviceType domain.DeviceType) (string, error) {
	ret := _m.Called(ctx, deviceType)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeviceType) string); ok {
		r0 = rf(ctx, deviceType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.DeviceType) error); ok {
		r1 = rf(ctx, deviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DeviceTypes) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *DeviceTypes) Get(ctx context.Context, id string) (domain.DeviceType, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.DeviceType
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.DeviceType); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.DeviceType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, deviceType
func (_m *DeviceTypes) Update(ctx context.Context, deviceType domain.DeviceType) error {
	ret := _m.Called(ctx, deviceType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeviceType) error); ok {
		r0 = rf(ctx, deviceType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
